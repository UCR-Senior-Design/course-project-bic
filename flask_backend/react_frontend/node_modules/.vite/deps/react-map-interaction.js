import {
  __commonJS,
  require_react
} from "./chunk-MYQCFY5U.js";

// ../../node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../../node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// ../../node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../../node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// ../../node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../../node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// ../../node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "../../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// ../../node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "../../node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// ../../node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "../../node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// ../../node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "../../node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// ../../node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "../../node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// ../../node_modules/react-map-interaction/dist/react-map-interaction.js
var require_react_map_interaction = __commonJS({
  "../../node_modules/react-map-interaction/dist/react-map-interaction.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_prop_types(), require_react());
      else if (typeof define === "function" && define.amd)
        define(["prop-types", "React"], factory);
      else if (typeof exports === "object")
        exports["ReactMapInteraction"] = factory(require_prop_types(), require_react());
      else
        root["ReactMapInteraction"] = factory(root["PropTypes"], root["React"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, { enumerable: true, get: getter });
            }
          };
          __webpack_require__.r = function(exports2) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
              Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
            }
            Object.defineProperty(exports2, "__esModule", { value: true });
          };
          __webpack_require__.t = function(value, mode) {
            if (mode & 1)
              value = __webpack_require__(value);
            if (mode & 8)
              return value;
            if (mode & 4 && typeof value === "object" && value && value.__esModule)
              return value;
            var ns = /* @__PURE__ */ Object.create(null);
            __webpack_require__.r(ns);
            Object.defineProperty(ns, "default", { enumerable: true, value });
            if (mode & 2 && typeof value != "string")
              for (var key in value)
                __webpack_require__.d(ns, key, (function(key2) {
                  return value[key2];
                }).bind(null, key));
            return ns;
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 2);
        }([
          /* 0 */
          /***/
          function(module2, exports2) {
            module2.exports = __WEBPACK_EXTERNAL_MODULE__0__;
          },
          /* 1 */
          /***/
          function(module2, exports2) {
            module2.exports = __WEBPACK_EXTERNAL_MODULE__1__;
          },
          /* 2 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var external_commonjs_react_commonjs2_react_amd_React_root_React_ = __webpack_require__(1);
            var external_commonjs_react_commonjs2_react_amd_React_root_React_default = __webpack_require__.n(external_commonjs_react_commonjs2_react_amd_React_root_React_);
            var external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_ = __webpack_require__(0);
            var external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default = __webpack_require__.n(external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_);
            function _typeof(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof2(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof = function _typeof2(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof(obj);
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            function _possibleConstructorReturn(self, call) {
              if (call && (_typeof(call) === "object" || typeof call === "function")) {
                return call;
              }
              return _assertThisInitialized(self);
            }
            function _assertThisInitialized(self) {
              if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self;
            }
            function _getPrototypeOf(o) {
              _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              };
              return _getPrototypeOf(o);
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
              if (superClass)
                _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            var Controls_Controls = function(_Component) {
              _inherits(Controls, _Component);
              function Controls() {
                _classCallCheck(this, Controls);
                return _possibleConstructorReturn(this, _getPrototypeOf(Controls).apply(this, arguments));
              }
              _createClass(Controls, [{
                key: "render",
                value: function render() {
                  var _this = this;
                  var _this$props = this.props, plusBtnContents = _this$props.plusBtnContents, minusBtnContents = _this$props.minusBtnContents, btnClass = _this$props.btnClass, plusBtnClass = _this$props.plusBtnClass, minusBtnClass = _this$props.minusBtnClass, controlsClass = _this$props.controlsClass, scale = _this$props.scale, minScale = _this$props.minScale, maxScale = _this$props.maxScale, onClickPlus = _this$props.onClickPlus, onClickMinus = _this$props.onClickMinus, disableZoom = _this$props.disableZoom;
                  var btnStyle = {
                    width: 30,
                    paddingTop: 5,
                    marginBottom: 5
                  };
                  var controlsStyle = controlsClass ? void 0 : {
                    position: "absolute",
                    right: 10,
                    top: 10
                  };
                  function plusHandler(e) {
                    e.preventDefault();
                    e.target.blur();
                    if (disableZoom)
                      return;
                    onClickPlus();
                  }
                  function minusHandler(e) {
                    e.preventDefault();
                    e.target.blur();
                    if (disableZoom)
                      return;
                    onClickMinus();
                  }
                  return external_commonjs_react_commonjs2_react_amd_React_root_React_default.a.createElement("div", {
                    style: controlsStyle,
                    className: controlsClass
                  }, external_commonjs_react_commonjs2_react_amd_React_root_React_default.a.createElement("div", null, external_commonjs_react_commonjs2_react_amd_React_root_React_default.a.createElement("button", {
                    ref: function ref(node) {
                      _this.plusNode = node;
                    },
                    onClick: plusHandler,
                    onTouchEnd: plusHandler,
                    className: [btnClass ? btnClass : "", plusBtnClass ? plusBtnClass : ""].join(" "),
                    type: "button",
                    style: btnClass || plusBtnClass ? void 0 : btnStyle,
                    disabled: disableZoom || scale >= maxScale
                  }, plusBtnContents)), external_commonjs_react_commonjs2_react_amd_React_root_React_default.a.createElement("div", null, external_commonjs_react_commonjs2_react_amd_React_root_React_default.a.createElement("button", {
                    ref: function ref(node) {
                      _this.minusNode = node;
                    },
                    onClick: minusHandler,
                    onTouchEnd: minusHandler,
                    className: [btnClass ? btnClass : "", minusBtnClass ? minusBtnClass : ""].join(" "),
                    type: "button",
                    style: btnClass || minusBtnClass ? void 0 : btnStyle,
                    disabled: disableZoom || scale <= minScale
                  }, minusBtnContents)));
                }
              }]);
              return Controls;
            }(external_commonjs_react_commonjs2_react_amd_React_root_React_["Component"]);
            Controls_Controls.propTypes = {
              onClickPlus: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.func.isRequired,
              onClickMinus: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.func.isRequired,
              plusBtnContents: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.node,
              minusBtnContents: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.node,
              btnClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string,
              plusBtnClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string,
              minusBtnClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string,
              controlsClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string,
              scale: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
              minScale: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
              maxScale: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
              disableZoom: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.bool
            };
            Controls_Controls.defaultProps = {
              plusBtnContents: "+",
              minusBtnContents: "-",
              disableZoom: false
            };
            var src_Controls = Controls_Controls;
            function clamp(min, value, max) {
              return Math.max(min, Math.min(value, max));
            }
            function distance(p1, p2) {
              var dx = p1.x - p2.x;
              var dy = p1.y - p2.y;
              return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
            }
            function midpoint(p1, p2) {
              return {
                x: (p1.x + p2.x) / 2,
                y: (p1.y + p2.y) / 2
              };
            }
            function touchPt(touch) {
              return {
                x: touch.clientX,
                y: touch.clientY
              };
            }
            function touchDistance(t0, t1) {
              var p0 = touchPt(t0);
              var p1 = touchPt(t1);
              return distance(p0, p1);
            }
            var passiveSupported = false;
            try {
              var options = {
                get passive() {
                  passiveSupported = true;
                }
              };
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (_unused) {
              passiveSupported = false;
            }
            function makePassiveEventOption(passive) {
              return passiveSupported ? {
                passive
              } : passive;
            }
            var src_makePassiveEventOption = makePassiveEventOption;
            function MapInteraction_typeof(obj) {
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                MapInteraction_typeof = function _typeof2(obj2) {
                  return typeof obj2;
                };
              } else {
                MapInteraction_typeof = function _typeof2(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return MapInteraction_typeof(obj);
            }
            function _extends() {
              _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends.apply(this, arguments);
            }
            function _objectWithoutProperties(source, excluded) {
              if (source == null)
                return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key, i;
              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key = sourceSymbolKeys[i];
                  if (excluded.indexOf(key) >= 0)
                    continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key))
                    continue;
                  target[key] = source[key];
                }
              }
              return target;
            }
            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null)
                return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0)
                  continue;
                target[key] = source[key];
              }
              return target;
            }
            function _objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};
                var ownKeys = Object.keys(source);
                if (typeof Object.getOwnPropertySymbols === "function") {
                  ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                  }));
                }
                ownKeys.forEach(function(key) {
                  _defineProperty(target, key, source[key]);
                });
              }
              return target;
            }
            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function MapInteraction_classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function MapInteraction_possibleConstructorReturn(self, call) {
              if (call && (MapInteraction_typeof(call) === "object" || typeof call === "function")) {
                return call;
              }
              return MapInteraction_assertThisInitialized(self);
            }
            function MapInteraction_getPrototypeOf(o) {
              MapInteraction_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              };
              return MapInteraction_getPrototypeOf(o);
            }
            function MapInteraction_assertThisInitialized(self) {
              if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self;
            }
            function MapInteraction_defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function MapInteraction_createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                MapInteraction_defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                MapInteraction_defineProperties(Constructor, staticProps);
              return Constructor;
            }
            function MapInteraction_inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
              if (superClass)
                MapInteraction_setPrototypeOf(subClass, superClass);
            }
            function MapInteraction_setPrototypeOf(o, p) {
              MapInteraction_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return MapInteraction_setPrototypeOf(o, p);
            }
            var coordChange = function coordChange2(coordinate, scaleRatio) {
              return scaleRatio * coordinate - coordinate;
            };
            var translationShape = external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.shape({
              x: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
              y: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number
            });
            var MapInteraction_MapInteractionControlled = function(_Component) {
              MapInteraction_inherits(MapInteractionControlled, _Component);
              MapInteraction_createClass(MapInteractionControlled, null, [{
                key: "propTypes",
                get: function get() {
                  return {
                    // The content that will be transformed
                    children: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.func,
                    // This is a controlled component
                    value: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.shape({
                      scale: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number.isRequired,
                      translation: translationShape.isRequired
                    }).isRequired,
                    onChange: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.func.isRequired,
                    disableZoom: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.bool,
                    disablePan: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.bool,
                    translationBounds: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.shape({
                      xMin: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
                      xMax: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
                      yMin: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
                      yMax: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number
                    }),
                    minScale: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
                    maxScale: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
                    showControls: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.bool,
                    plusBtnContents: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.node,
                    minusBtnContents: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.node,
                    btnClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string,
                    plusBtnClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string,
                    minusBtnClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string,
                    controlsClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string
                  };
                }
              }, {
                key: "defaultProps",
                get: function get() {
                  return {
                    minScale: 0.05,
                    maxScale: 3,
                    showControls: false,
                    translationBounds: {},
                    disableZoom: false,
                    disablePan: false
                  };
                }
              }]);
              function MapInteractionControlled(props) {
                var _this;
                MapInteraction_classCallCheck(this, MapInteractionControlled);
                _this = MapInteraction_possibleConstructorReturn(this, MapInteraction_getPrototypeOf(MapInteractionControlled).call(this, props));
                _this.state = {
                  shouldPreventTouchEndDefault: false
                };
                _this.startPointerInfo = void 0;
                _this.onMouseDown = _this.onMouseDown.bind(MapInteraction_assertThisInitialized(_this));
                _this.onTouchStart = _this.onTouchStart.bind(MapInteraction_assertThisInitialized(_this));
                _this.onMouseMove = _this.onMouseMove.bind(MapInteraction_assertThisInitialized(_this));
                _this.onTouchMove = _this.onTouchMove.bind(MapInteraction_assertThisInitialized(_this));
                _this.onMouseUp = _this.onMouseUp.bind(MapInteraction_assertThisInitialized(_this));
                _this.onTouchEnd = _this.onTouchEnd.bind(MapInteraction_assertThisInitialized(_this));
                _this.onWheel = _this.onWheel.bind(MapInteraction_assertThisInitialized(_this));
                return _this;
              }
              MapInteraction_createClass(MapInteractionControlled, [{
                key: "componentDidMount",
                value: function componentDidMount() {
                  var passiveOption = src_makePassiveEventOption(false);
                  this.getContainerNode().addEventListener("wheel", this.onWheel, passiveOption);
                  this.getContainerNode().addEventListener("touchstart", this.onTouchStart, passiveOption);
                  this.getContainerNode().addEventListener("mousedown", this.onMouseDown, passiveOption);
                  window.addEventListener("touchmove", this.onTouchMove, passiveOption);
                  window.addEventListener("mousemove", this.onMouseMove, passiveOption);
                  var touchAndMouseEndOptions = _objectSpread({
                    capture: true
                  }, passiveOption);
                  window.addEventListener("touchend", this.onTouchEnd, touchAndMouseEndOptions);
                  window.addEventListener("mouseup", this.onMouseUp, touchAndMouseEndOptions);
                }
              }, {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  this.getContainerNode().removeEventListener("wheel", this.onWheel);
                  this.getContainerNode().removeEventListener("touchstart", this.onTouchStart);
                  window.removeEventListener("touchmove", this.onTouchMove);
                  window.removeEventListener("touchend", this.onTouchEnd);
                  this.getContainerNode().removeEventListener("mousedown", this.onMouseDown);
                  window.removeEventListener("mousemove", this.onMouseMove);
                  window.removeEventListener("mouseup", this.onMouseUp);
                }
                /*
                  Event handlers
                   All touch/mouse handlers preventDefault because we add
                  both touch and mouse handlers in the same session to support devicse
                  with both touch screen and mouse inputs. The browser may fire both
                  a touch and mouse event for a *single* user action, so we have to ensure
                  that only one handler is used by canceling the event in the first handler.
                   https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent
                */
              }, {
                key: "onMouseDown",
                value: function onMouseDown(e) {
                  e.preventDefault();
                  this.setPointerState([e]);
                }
              }, {
                key: "onTouchStart",
                value: function onTouchStart(e) {
                  e.preventDefault();
                  this.setPointerState(e.touches);
                }
              }, {
                key: "onMouseUp",
                value: function onMouseUp(e) {
                  this.setPointerState();
                }
              }, {
                key: "onTouchEnd",
                value: function onTouchEnd(e) {
                  this.setPointerState(e.touches);
                }
              }, {
                key: "onMouseMove",
                value: function onMouseMove(e) {
                  if (!this.startPointerInfo || this.props.disablePan) {
                    return;
                  }
                  e.preventDefault();
                  this.onDrag(e);
                }
              }, {
                key: "onTouchMove",
                value: function onTouchMove(e) {
                  if (!this.startPointerInfo) {
                    return;
                  }
                  e.preventDefault();
                  var _this$props = this.props, disablePan = _this$props.disablePan, disableZoom = _this$props.disableZoom;
                  var isPinchAction = e.touches.length == 2 && this.startPointerInfo.pointers.length > 1;
                  if (isPinchAction && !disableZoom) {
                    this.scaleFromMultiTouch(e);
                  } else if (e.touches.length === 1 && this.startPointerInfo && !disablePan) {
                    this.onDrag(e.touches[0]);
                  }
                }
                // handles both touch and mouse drags
              }, {
                key: "onDrag",
                value: function onDrag(pointer) {
                  var _this2 = this;
                  var _this$startPointerInf = this.startPointerInfo, translation = _this$startPointerInf.translation, pointers = _this$startPointerInf.pointers;
                  var startPointer = pointers[0];
                  var dragX = pointer.clientX - startPointer.clientX;
                  var dragY = pointer.clientY - startPointer.clientY;
                  var newTranslation = {
                    x: translation.x + dragX,
                    y: translation.y + dragY
                  };
                  var shouldPreventTouchEndDefault = Math.abs(dragX) > 1 || Math.abs(dragY) > 1;
                  this.setState({
                    shouldPreventTouchEndDefault
                  }, function() {
                    _this2.props.onChange({
                      scale: _this2.props.value.scale,
                      translation: _this2.clampTranslation(newTranslation)
                    });
                  });
                }
              }, {
                key: "onWheel",
                value: function onWheel(e) {
                  if (this.props.disableZoom) {
                    return;
                  }
                  e.preventDefault();
                  e.stopPropagation();
                  var scaleChange = Math.pow(2, e.deltaY * 2e-3);
                  var newScale = clamp(this.props.minScale, this.props.value.scale + (1 - scaleChange), this.props.maxScale);
                  var mousePos = this.clientPosToTranslatedPos({
                    x: e.clientX,
                    y: e.clientY
                  });
                  this.scaleFromPoint(newScale, mousePos);
                }
              }, {
                key: "setPointerState",
                value: function setPointerState(pointers) {
                  if (!pointers || pointers.length === 0) {
                    this.startPointerInfo = void 0;
                    return;
                  }
                  this.startPointerInfo = {
                    pointers,
                    scale: this.props.value.scale,
                    translation: this.props.value.translation
                  };
                }
              }, {
                key: "clampTranslation",
                value: function clampTranslation(desiredTranslation) {
                  var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.props;
                  var x = desiredTranslation.x, y = desiredTranslation.y;
                  var _props$translationBou = props.translationBounds, xMax = _props$translationBou.xMax, xMin = _props$translationBou.xMin, yMax = _props$translationBou.yMax, yMin = _props$translationBou.yMin;
                  xMin = xMin != void 0 ? xMin : -Infinity;
                  yMin = yMin != void 0 ? yMin : -Infinity;
                  xMax = xMax != void 0 ? xMax : Infinity;
                  yMax = yMax != void 0 ? yMax : Infinity;
                  return {
                    x: clamp(xMin, x, xMax),
                    y: clamp(yMin, y, yMax)
                  };
                }
              }, {
                key: "translatedOrigin",
                value: function translatedOrigin() {
                  var translation = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props.value.translation;
                  var clientOffset = this.getContainerBoundingClientRect();
                  return {
                    x: clientOffset.left + translation.x,
                    y: clientOffset.top + translation.y
                  };
                }
                // From a given screen point return it as a point
                // in the coordinate system of the given translation
              }, {
                key: "clientPosToTranslatedPos",
                value: function clientPosToTranslatedPos(_ref) {
                  var x = _ref.x, y = _ref.y;
                  var translation = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.props.value.translation;
                  var origin = this.translatedOrigin(translation);
                  return {
                    x: x - origin.x,
                    y: y - origin.y
                  };
                }
              }, {
                key: "scaleFromPoint",
                value: function scaleFromPoint(newScale, focalPt) {
                  var _this$props$value = this.props.value, translation = _this$props$value.translation, scale = _this$props$value.scale;
                  var scaleRatio = newScale / (scale != 0 ? scale : 1);
                  var focalPtDelta = {
                    x: coordChange(focalPt.x, scaleRatio),
                    y: coordChange(focalPt.y, scaleRatio)
                  };
                  var newTranslation = {
                    x: translation.x - focalPtDelta.x,
                    y: translation.y - focalPtDelta.y
                  };
                  this.props.onChange({
                    scale: newScale,
                    translation: this.clampTranslation(newTranslation)
                  });
                }
                // Given the start touches and new e.touches, scale and translate
                // such that the initial midpoint remains as the new midpoint. This is
                // to achieve the effect of keeping the content that was directly
                // in the middle of the two fingers as the focal point throughout the zoom.
              }, {
                key: "scaleFromMultiTouch",
                value: function scaleFromMultiTouch(e) {
                  var startTouches = this.startPointerInfo.pointers;
                  var newTouches = e.touches;
                  var dist0 = touchDistance(startTouches[0], startTouches[1]);
                  var dist1 = touchDistance(newTouches[0], newTouches[1]);
                  var scaleChange = dist1 / dist0;
                  var startScale = this.startPointerInfo.scale;
                  var targetScale = startScale + (scaleChange - 1) * startScale;
                  var newScale = clamp(this.props.minScale, targetScale, this.props.maxScale);
                  var startMidpoint = midpoint(touchPt(startTouches[0]), touchPt(startTouches[1]));
                  var newMidPoint = midpoint(touchPt(newTouches[0]), touchPt(newTouches[1]));
                  var dragDelta = {
                    x: newMidPoint.x - startMidpoint.x,
                    y: newMidPoint.y - startMidpoint.y
                  };
                  var scaleRatio = newScale / startScale;
                  var focalPt = this.clientPosToTranslatedPos(startMidpoint, this.startPointerInfo.translation);
                  var focalPtDelta = {
                    x: coordChange(focalPt.x, scaleRatio),
                    y: coordChange(focalPt.y, scaleRatio)
                  };
                  var newTranslation = {
                    x: this.startPointerInfo.translation.x - focalPtDelta.x + dragDelta.x,
                    y: this.startPointerInfo.translation.y - focalPtDelta.y + dragDelta.y
                  };
                  this.props.onChange({
                    scale: newScale,
                    translation: this.clampTranslation(newTranslation)
                  });
                }
              }, {
                key: "discreteScaleStepSize",
                value: function discreteScaleStepSize() {
                  var _this$props2 = this.props, minScale = _this$props2.minScale, maxScale = _this$props2.maxScale;
                  var delta = Math.abs(maxScale - minScale);
                  return delta / 10;
                }
                // Scale using the center of the content as a focal point
              }, {
                key: "changeScale",
                value: function changeScale(delta) {
                  var targetScale = this.props.value.scale + delta;
                  var _this$props3 = this.props, minScale = _this$props3.minScale, maxScale = _this$props3.maxScale;
                  var scale = clamp(minScale, targetScale, maxScale);
                  var rect = this.getContainerBoundingClientRect();
                  var x = rect.left + rect.width / 2;
                  var y = rect.top + rect.height / 2;
                  var focalPoint = this.clientPosToTranslatedPos({
                    x,
                    y
                  });
                  this.scaleFromPoint(scale, focalPoint);
                }
                // Done like this so it is mockable
              }, {
                key: "getContainerNode",
                value: function getContainerNode() {
                  return this.containerNode;
                }
              }, {
                key: "getContainerBoundingClientRect",
                value: function getContainerBoundingClientRect() {
                  return this.getContainerNode().getBoundingClientRect();
                }
              }, {
                key: "renderControls",
                value: function renderControls() {
                  var _this3 = this;
                  var step = this.discreteScaleStepSize();
                  return external_commonjs_react_commonjs2_react_amd_React_root_React_default.a.createElement(src_Controls, {
                    onClickPlus: function onClickPlus() {
                      return _this3.changeScale(step);
                    },
                    onClickMinus: function onClickMinus() {
                      return _this3.changeScale(-step);
                    },
                    plusBtnContents: this.props.plusBtnContents,
                    minusBtnContents: this.props.minusBtnContents,
                    btnClass: this.props.btnClass,
                    plusBtnClass: this.props.plusBtnClass,
                    minusBtnClass: this.props.minusBtnClass,
                    controlsClass: this.props.controlsClass,
                    scale: this.props.value.scale,
                    minScale: this.props.minScale,
                    maxScale: this.props.maxScale,
                    disableZoom: this.props.disableZoom
                  });
                }
              }, {
                key: "render",
                value: function render() {
                  var _this4 = this;
                  var _this$props4 = this.props, showControls = _this$props4.showControls, children = _this$props4.children;
                  var scale = this.props.value.scale;
                  var translation = this.clampTranslation(this.props.value.translation);
                  var handleEventCapture = function handleEventCapture2(e) {
                    if (_this4.state.shouldPreventTouchEndDefault) {
                      e.preventDefault();
                      _this4.setState({
                        shouldPreventTouchEndDefault: false
                      });
                    }
                  };
                  return external_commonjs_react_commonjs2_react_amd_React_root_React_default.a.createElement("div", {
                    ref: function ref(node) {
                      _this4.containerNode = node;
                    },
                    style: {
                      height: "100%",
                      width: "100%",
                      position: "relative",
                      // for absolutely positioned children
                      touchAction: "none"
                    },
                    onClickCapture: handleEventCapture,
                    onTouchEndCapture: handleEventCapture
                  }, (children || void 0) && children({
                    translation,
                    scale
                  }), (showControls || void 0) && this.renderControls());
                }
              }]);
              return MapInteractionControlled;
            }(external_commonjs_react_commonjs2_react_amd_React_root_React_["Component"]);
            var MapInteraction_MapInteractionController = function(_Component2) {
              MapInteraction_inherits(MapInteractionController, _Component2);
              MapInteraction_createClass(MapInteractionController, null, [{
                key: "propTypes",
                get: function get() {
                  return {
                    children: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.func,
                    value: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.shape({
                      scale: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number.isRequired,
                      translation: translationShape.isRequired
                    }),
                    defaultValue: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.shape({
                      scale: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number.isRequired,
                      translation: translationShape.isRequired
                    }),
                    disableZoom: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.bool,
                    disablePan: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.bool,
                    onChange: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.func,
                    translationBounds: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.shape({
                      xMin: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
                      xMax: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
                      yMin: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
                      yMax: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number
                    }),
                    minScale: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
                    maxScale: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.number,
                    showControls: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.bool,
                    plusBtnContents: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.node,
                    minusBtnContents: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.node,
                    btnClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string,
                    plusBtnClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string,
                    minusBtnClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string,
                    controlsClass: external_commonjs_prop_types_commonjs2_prop_types_commonj2s_prop_types_amd_prop_types_root_PropTypes_default.a.string
                  };
                }
              }]);
              function MapInteractionController(props) {
                var _this5;
                MapInteraction_classCallCheck(this, MapInteractionController);
                _this5 = MapInteraction_possibleConstructorReturn(this, MapInteraction_getPrototypeOf(MapInteractionController).call(this, props));
                var controlled = MapInteractionController.isControlled(props);
                if (controlled) {
                  _this5.state = {
                    lastKnownValueFromProps: props.value
                  };
                } else {
                  _this5.state = {
                    value: props.defaultValue || {
                      scale: 1,
                      translation: {
                        x: 0,
                        y: 0
                      }
                    },
                    lastKnownValueFromProps: void 0
                  };
                }
                return _this5;
              }
              MapInteraction_createClass(MapInteractionController, [{
                key: "innerProps",
                // The subset of this component's props that need to be passed
                // down to the core RMI component
                value: function innerProps() {
                  var _this$props5 = this.props, value = _this$props5.value, defaultValue = _this$props5.defaultValue, onChange = _this$props5.onChange, innerProps2 = _objectWithoutProperties(_this$props5, ["value", "defaultValue", "onChange"]);
                  return innerProps2;
                }
              }, {
                key: "getValue",
                value: function getValue() {
                  var controlled = MapInteractionController.isControlled(this.props);
                  return controlled ? this.props.value : this.state.value;
                }
              }, {
                key: "render",
                value: function render() {
                  var _this6 = this;
                  var _this$props6 = this.props, _onChange = _this$props6.onChange, children = _this$props6.children;
                  var controlled = MapInteractionController.isControlled(this.props);
                  var value = controlled ? this.props.value : this.state.value;
                  return external_commonjs_react_commonjs2_react_amd_React_root_React_default.a.createElement(MapInteraction_MapInteractionControlled, _extends({
                    onChange: function onChange(value2) {
                      controlled ? _onChange(value2) : _this6.setState({
                        value: value2
                      });
                    },
                    value
                  }, this.innerProps()), children);
                }
              }], [{
                key: "getDerivedStateFromProps",
                value: function getDerivedStateFromProps(props, state) {
                  var nowControlled = MapInteractionController.isControlled(props);
                  var wasControlled = state.lastKnownValueFromProps && MapInteractionController.isControlled({
                    value: state.lastKnownValueFromProps
                  });
                  if (!wasControlled && nowControlled) {
                    return {
                      value: void 0,
                      lastKnownValueFromProps: props.value
                    };
                  } else if (wasControlled && !nowControlled) {
                    return {
                      value: state.lastKnownValueFromProps,
                      lastKnownValueFromProps: void 0
                    };
                  } else if (wasControlled && nowControlled) {
                    return {
                      lastKnownValueFromProps: props.value
                    };
                  } else if (!wasControlled && !nowControlled) {
                    return null;
                  }
                }
              }, {
                key: "isControlled",
                value: function isControlled(props) {
                  return props.value != void 0;
                }
              }]);
              return MapInteractionController;
            }(external_commonjs_react_commonjs2_react_amd_React_root_React_["Component"]);
            var MapInteraction = MapInteraction_MapInteractionController;
            var MapInteractionCSS_MapInteractionCSS = function MapInteractionCSS(props) {
              return external_commonjs_react_commonjs2_react_amd_React_root_React_default.a.createElement(MapInteraction, props, function(_ref) {
                var translation = _ref.translation, scale = _ref.scale;
                var transform = "translate(".concat(translation.x, "px, ").concat(translation.y, "px) scale(").concat(scale, ")");
                return external_commonjs_react_commonjs2_react_amd_React_root_React_default.a.createElement("div", {
                  style: {
                    height: "100%",
                    width: "100%",
                    position: "relative",
                    // for absolutely positioned children
                    overflow: "hidden",
                    touchAction: "none",
                    // Not supported in Safari :(
                    msTouchAction: "none",
                    cursor: "all-scroll",
                    WebkitUserSelect: "none",
                    MozUserSelect: "none",
                    msUserSelect: "none"
                  }
                }, external_commonjs_react_commonjs2_react_amd_React_root_React_default.a.createElement("div", {
                  style: {
                    display: "inline-block",
                    // size to content
                    transform,
                    transformOrigin: "0 0 "
                  }
                }, props.children));
              });
            };
            var src_MapInteractionCSS = MapInteractionCSS_MapInteractionCSS;
            __webpack_require__.d(__webpack_exports__, "MapInteractionCSS", function() {
              return src_MapInteractionCSS;
            });
            __webpack_require__.d(__webpack_exports__, "MapInteraction", function() {
              return MapInteraction;
            });
            var src = __webpack_exports__["default"] = MapInteraction;
          }
          /******/
        ])
      );
    });
  }
});
export default require_react_map_interaction();
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=react-map-interaction.js.map
